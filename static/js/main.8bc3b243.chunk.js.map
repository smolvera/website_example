{"version":3,"sources":["components/Navbar.js","components/Home.js","components/About.js","HOC/Rainbow.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","react_default","a","createElement","className","NavLink","to","Home","state","posts","_this2","this","axios","get","then","res","setState","data","slice","postList","length","map","post","key","id","title","body","Component","Rainbow","WrappedComponent","Math","floor","random","Contact","console","log","App","BrowserRouter","components_Navbar","Route","exact","path","component","About","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAsBeA,cAnBA,SAACC,GAKZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,IAAIF,UAAU,cAA1B,gBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACVH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,KAAZ,SACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,UAAZ,UACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,YAAZ,kDC6BTC,6MAxCXC,MAAQ,CACJC,MAAO,uFAES,IAAAC,EAAAC,KAChBC,IAAMC,IAAI,+CACTC,KAAK,SAAAC,GAEFL,EAAKM,SAAS,CACVP,MAAOM,EAAIE,KAAKC,MAAM,EAAG,yCAI5B,IACGT,EAAUE,KAAKH,MAAfC,MACFU,EAAWV,EAAMW,OACnBX,EAAMY,IAAI,SAAAC,GACN,OACIrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYmB,IAAKD,EAAKE,IACjCvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAckB,EAAKG,OACnCxB,EAAAC,EAAAC,cAAA,SAAImB,EAAKI,UAMzBzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,iBAEJ,OACIH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,QACCe,WAjCFQ,aCUJC,ECXC,SAACC,GACb,IAIMzB,EAJU,CAAC,MAAO,OAAQ,QAAS,OAAQ,SAAU,SAAU,SAAU,UAElD0B,KAAKC,MAAsB,EAAhBD,KAAKE,WAEZ,QAEjC,OAAO,SAAChC,GACJ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWA,GACZH,EAAAC,EAAAC,cAAC0B,EAAqB7B,KDCvB4B,CATD,WACV,OACI3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,SACAH,EAAAC,EAAAC,cAAA,yCEQG8B,EAdC,SAACjC,GAMb,OALAkC,QAAQC,IAAInC,GAMRC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,WACAH,EAAAC,EAAAC,cAAA,0CCYGiC,mLAbX,OACEnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjCN,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWC,IAChC1C,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWT,aAR1BN,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.8bc3b243.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\n\r\nconst Navbar = (props) => {\r\n    // console.log(props)\r\n    // setTimeout(() => {\r\n    //     props.history.push('./about')\r\n    // }, 2000)\r\n    return(\r\n        <nav className=\"nav-wrapper red darken-3\">\r\n            <div className=\"container\">\r\n                <NavLink to=\"/\" className=\"brand-logo\">Mock Website</NavLink>\r\n                <ul className=\"right\">\r\n                    <li><NavLink to=\"/\">Home</NavLink></li>\r\n                    <li><NavLink to=\"/about\">About</NavLink></li>\r\n                    <li><NavLink to=\"/contact\">Contact</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default withRouter(Navbar);","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        posts: []\r\n    }\r\n    componentDidMount() {\r\n        axios.get('https://jsonplaceholder.typicode.com/posts/')\r\n        .then(res => {\r\n            // console.log(res)\r\n            this.setState({\r\n                posts: res.data.slice(0, 10)\r\n            })\r\n        })\r\n    }\r\n    render() {\r\n        const { posts } = this.state;\r\n        const postList = posts.length ? (\r\n            posts.map(post => {\r\n                return(\r\n                    <div className=\"post card\" key={post.id}>\r\n                        <div className=\"card-content\">\r\n                            <span className=\"card-title\">{post.title}</span>\r\n                            <p>{post.body}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        ) : (\r\n            <div className=\"center\">No Posts Yet!</div>\r\n        )   \r\n        return(\r\n            <div>\r\n                <div className=\"container\">\r\n                    <h4 className=\"center\">Home</h4>\r\n                    {postList}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Rainbow from '../HOC/Rainbow';\r\n  \r\n\r\nconst About = () => {\r\n    return(\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">About</h4>\r\n            <p>Welcome to the About page</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rainbow(About);","import React from 'react';\r\n\r\nconst Rainbow = (WrappedComponent) => {\r\n    const colours = [\"red\", \"pink\", \"green\", \"blue\", \"orange\", \"yellow\", \"indigo\", \"purple\"];\r\n\r\n    const randomColour = colours[Math.floor(Math.random() * 7)];\r\n\r\n    const className = randomColour + '-text';\r\n\r\n    return (props) => {\r\n        return(\r\n            <div className={className}>\r\n                <WrappedComponent {...props} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    }\r\n\r\n\r\nexport default Rainbow;","import React from 'react';\r\n\r\nconst Contact = (props) => {\r\n    console.log(props);\r\n    //programatic redirect example\r\n    // setTimeout(() => {\r\n    //     props.history.push(\"/about\");\r\n    // }, 2000);\r\n    return(\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">Contact</h4>\r\n            <p>Welcome to the Contact page</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar\";\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Contact from './components/Contact';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar /> \n          <Route exact path='/' component={Home} />\n          <Route path='/about' component={About} />\n          <Route path='/contact' component={Contact} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}